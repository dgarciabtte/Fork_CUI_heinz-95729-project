{
  "include": ["./api", "./src"],
  "compilerOptions": {
    // aliases
    "baseUrl": ".",
    "paths": {
      // api
      "~~domains/*": ["./api/src/domains/*"],
      "~~lib/*": ["./api/src/lib/*"],
      // web
      "@domains/*": ["./src/domains/*"],
      "@layouts/*": ["./src/layouts/*"],
      "@lib/*": ["./src/lib/*"],
      "@pages/*": ["./src/pages/*"],
      "@env/*": ["./src/lib/env/index.ts"],
      "@logger/*": ["./src/lib/logger/index.ts"],
    },
    // versioning
    "target": "ES2020",                       // Enable top-level await, and other modern ESM features.
    "module": "ESNext",
    "lib": [                                  // Type definitions for built-in JS APIs
      "ES2020",
      "DOM",
      "DOM.Iterable",
      "WebWorker"
    ],
    // options
    "allowJs": true,                          // Allow JavaScript files to be imported
    "allowSyntheticDefaultImports": true,     // Allow importing default exports from modules that don't explicitly define them (e.g. allow `import React` in place of `import * from React`)
    "allowUnreachableCode": false,            // Report an error for unreachable code instead of just a warning.
    "allowUnusedLabels": false,               // Report an error for unused labels instead of just a warning.
    "checkJs": true,                          // Enable type checking on JavaScript files.
    "composite": true,                        // Enable incremental compilation
    "esModuleInterop": true,                  // Properly support importing CJS modules in ESM
    "exactOptionalPropertyTypes": true,       // Report an error when the value `undefined` is given to an optional property that doesn't specify `undefined` as a valid value.
    "forceConsistentCasingInFileNames": true, // Report an error when importing a file using a casing different from another import of the same file.
    "isolatedModules": true,                  // Ensure that each file can be transpiled without relying on other imports. This is redundant with the previous option, however it ensures that it's on even if someone disable `verbatimModuleSyntax`
    "jsx": "react-jsx",                       // Controls how JSX constructs are emitted in JavaScript files. This only affects output of JS files that started in .tsx files.
    "jsxImportSource": "react",               // Change this if you're using preact, or another JSX runtime.
    "moduleResolution": "bundler",            // Enable node-style module resolution, for things like npm package imports.
    "noEmit": true,                           // Astro directly run TypeScript code, no transpilation needed.
    "noFallthroughCasesInSwitch": true,       // Report errors for fallthrough cases in switch statements
    "noImplicitOverride": true,               // Force functions designed to override their parent class to be specified as `override`.
    "noImplicitReturns": true,                // Force functions to specify that they can return `undefined` if a possible code path does not return a value.
    "noUncheckedIndexedAccess": true,         // Force the usage of the indexed syntax to access fields declared using an index signature.
    "noUnusedLocals": true,                   // Report an error when a variable is declared but never used.
    "noUnusedParameters": true,               // Report an error when a parameter is declared but never used.
    "resolveJsonModule": true,                // Enable JSON imports.
    "skipLibCheck": true,                     // Skip typechecking libraries and .d.ts files
    "sourceMap": true,                        // Support warnings / errors for compiled code at the correct positions
    "strict": true,                           // Enable strict mode. This enables a few options at a time, see https://www.typescriptlang.org/tsconfig#strict for a list.
    "useDefineForClassFields": true,          // Switches to the upcoming ECMA runtime behavior
    "verbatimModuleSyntax": true              // Enforce the usage of type-only imports when needed, which helps avoiding bundling issues.
  }
}
